// Typography modules
@charset "UTF-8";

$browser-default-font-size: 16px;

$base-font-size: 16px !default;
$base-line-height: 24px !default;

@function convert-to-px ($val, $context: $base-font-size-px) {
    $type: type-of($val);
    $unit: '';
    $scale: 1;
    @if ($type == number) {
        $unit: unit($val);
        @if ($unit == 'px') {
            @return $val;
        } @else if ($unit == 'em') {
            @return $context * ($val / 1em);
        } @else if ($unit == 'rem') {
            @return $browser-default-font-size * ($val / 1rem);
        } @else if ($unit == '%') {
            @return $context * ($val / 100%);
        } @else if (unitless($val)) {
            @return $context * $val;
        } @else {
            @return $context;
        }
    } @else if ($type == string) {
        @if ($val == 'xx-small') {
            $scale: 3/5;
        } @else if ($val == 'x-small') {
            $scale: 3/4;
        } @else if ($val == 'small') {
            $scale: 8/9;
        } @else if ($val == 'medium') {
            $scale: 1;
        } @else if ($val == 'large') {
            $scale: 6/5;
        } @else if ($val == 'x-large') {
            $scale: 3/2;
        } @else if ($val == 'xx-large') {
            $scale: 2/1;
        }
        @return $browser-default-font-size * $scale;
    } @else {
        @return $val;
    }
}

$base-font-size-px: convert-to-px($base-font-size, $browser-default-font-size);
$base-line-height-px: convert-to-px($base-line-height);

$base-leading: $base-line-height-px - $base-font-size-px;
$base-half-leading: $base-leading / 2;

@mixin base-font-size ($val: $base-font-size) {
    $type: type-of($val);
    $unit: '';
    $result: $val;
    @if ($type == number) {
        $unit: unit($val);
        @if ($unit == 'em') {
            $result: percentage($val / 1em);
        } @else if ($unit == 'rem') {
            $result: percentage($val / 1rem);
        } @else if ($unit == 'px') {
            $result: percentage($val / $browser-default-font-size);
        } @else if (unitless($val)) {
            $result: percentage($val);
        }
    }
    font-size: $result;
}

@mixin font-size ($font-size, $context: $base-font-size-px) {
    $context: convert-to-px($context);
    $font-size: convert-to-px($font-size, $context);
    font-size: percentage($font-size / $context);
}

@mixin line-height ($line-height, $font-size: $base-font-size-px) {
    $font-size: convert-to-px($font-size);
    $line-height: convert-to-px($line-height, $font-size);
    line-height: $line-height / $font-size;
}

// @function adjust-leading ($font-size, $leading: $base-leading) {
//     $font-size: convert-to-px($font-size);
//     $leading: convert-to-px($leading);
//     @return ($font-size + $leading) / $font-size;
// }

@mixin adjust-leading ($font-size, $leading: $base-leading) {
    $font-size: convert-to-px($font-size);
    $leading: convert-to-px($leading);
    line-height: ($font-size + $leading) / $font-size;
}

// @mixin extra-leading ($current-font-size, $current-line-height, $adjust-baseline: true) {
//     @if (unit($current-font-size) == 'px') {
//         $current-font-size: $current-font-size / 16px * 1em;
//     } @else if (unit($current-font-size) == '%') {
//         $current-font-size: $current-font-size / 100% * 1em;
//     }
//     $leading: ($base-half-leading / $current-font-size - ($current-line-height - 1) / 2) * 1em;
//     padding-bottom: $leading;
//     @if ($adjust-baseline) {
//         padding-top: $leading + ((1em - $current-font-size) / $current-font-size) * 1em;
//     } @else {
//         padding-top: $leading;
//     }
// }

@function convert-to-rem ($size) {
    $size: convert-to-px($size);
    @return $size / $base-font-size-px * 1rem;
}

@mixin rem ($prop, $size) {
    $size: convert-to-px($size);
    #{ $prop }: $size;
    #{ $prop }: convert-to-rem($size);
}

@function calc-vertical-rhythm ($lines: 1) {
    @return $base-line-height-px * $lines; // px
}

@mixin vertical-rhythm ($prop, $lines: 1) {
    @include rem($prop, calc-vertical-rhythm($lines));
}
